//------------------------------------------Access Control Module--------------------------------------------------

alias funcNum R1;

//------------Acquire Kernel Lock(final)----------------
if(funcNum == ACQUIRE_KERN_LOCK) then
	if(CORE == 1) then
		if(([SYSTEM_STATUS_TABLE + 5] != 0) || ([SYSTEM_STATUS_TABLE + 7] == 1)) then
			//if secondary core and paging or logout_status is on eXpOS don't permit a process to execute critical code
			[PROCESS_TABLE + (16 * [SYSTEM_STATUS_TABLE + (5 * CORE) + 1]) + 4] = READY;
			backup;
			call MOD_5;
			restore;
		endif;
	endif;

	while(tsl(KERN_LOCK) == 1) do
		continue;
	endwhile;
	return;
endif;
//------------------------------------------------------

//----------Acquire Scheduler Lock-TSL(final)-----------
//if(funcNum == ACQUIRE_SCHED_LOCK) then
//	while(tsl(SCHED_LOCK) == 1) do
//		continue;
//	endwhile;
//	return;
//endif;
//------------------------------------------------------

//-------Acquire Scheduler Lock-Peterson(final)---------
if(funcNum == ACQUIRE_SCHED_LOCK) then
	//[143 * 512] denotes flag[0] for Primary Core
	//[143 * 512 + 1] denotes flag[1] for Secondary Core
	//[143 * 512 + 2] denotes interest
	if(R2 == 0) then
		[143 * 512] = 1;	//flag[0]
		[143 * 512 + 2] = 1;	//interest
		while(([143 * 512 + 1] == 1) && ([143 * 512 + 2] == 1)) do
			continue;
		endwhile;
	else
		[143 * 512 + 2] = 0;	//interest
		[143 * 512 + 1] = 1;	//flag[1]
		while(([143 * 512] == 1) && ([143 * 512 + 2] == 0)) do
			continue;
		endwhile;
	endif;
	return;
endif;
//------------------------------------------------------

//---------Release Scheduler Lock-Peterson(final)-------
if(funcNum == 10) then
	if(R2 == 0) then
		[143 * 512] = 0;
	else
		[143 * 512 + 1] = 0;
	endif;
	return;
endif;
//------------------------------------------------------

//--------------Acquire GLOCK(final)--------------------
if(funcNum == ACQUIRE_GLOCK) then
	while(tsl(GLOCK) == 1) do
		continue;
	endwhile;
	return;
endif;
//------------------------------------------------------

//----------------Release Lock(final)-------------------
if(funcNum == RELEASE_LOCK) then
	alias LockVarAddr R2;
	[LockVarAddr] = 0;
	return;
endif;
//------------------------------------------------------
return;
//-----------------------------------------------------------------------------------------------------------------
